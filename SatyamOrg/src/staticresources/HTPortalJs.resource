  Ext.ux.Portal = Ext.extend(Ext.Panel, {	layout : 'column',	autoScroll : true,	cls : 'x-portal',		defaultType : 'portalcolumn',		portlets : {},    myportlets : {},		initComponent : function() {			Ext.ux.Portal.superclass.initComponent.call(this);			this.addEvents( {				validatedrop : true,				beforedragover : true,				dragover : true,				beforedrop : true,				drop : true			});		},		initEvents : function() {			Ext.ux.Portal.superclass.initEvents.call(this);			this.dd = new Ext.ux.Portal.DropZone(this, this.dropConfig);					},				addPortlet : function(pInfo) {			var p = new Ext.ux.Portlet( {			    autoCreate : true,                 id:pInfo.id,                name:pInfo.name,                currentState:pInfo.currentState,				autoCreate : false,				title : pInfo.title,								columnId : pInfo.columnId,								//items : pInfo.dd.panel.body				//items : pInfo.body				html:pInfo.newBody			});									p.pInfo = pInfo;			            //alert(Ext.getDom(pInfo.el));			this.portlets[pInfo.id] = p;            			var col = this.items.itemAt(0);						var minNum = col.items.length;			for (var i = 0;i < this.items.length; i++) {				var c = this.items.itemAt(i);				if (c.items.length < minNum) {					minNum = c.items.length;					col = c;				}			}						if(Ext.ComponentMgr.get(p.columnId)){			  //alert('me');	 			  Ext.ComponentMgr.get(p.columnId).add(p);			  			}else{              col.add(p); 			}						p.pClmn = col;			return p;		},		removePortlet : function(id) {			var p = this.portlets[id];			if (p) {				p.pClmn.remove(p, true);				delete this.portlets[id];			}		},		removeAllPortlets : function() {			for (var i = 0;i < this.items.length; i++) {				var c = this.items.itemAt(i);				for (var j = c.items.length - 1;j >= 0; j--) {					//this.myportlets.add(this.getNewPortlet(c.items.itemAt(j)))										c.remove(c.items.itemAt(j),true);					 //Ext.removeNode(c.items.itemAt(j).dom);					 //delete El.cache[c.items.itemAt(j).dom];				}			}			this.portlets = {};		},		getAllPortlets : function() {			var retVal = [];			for (var i = 0;i < this.items.length; i++) {				var c = this.items.itemAt(i);				for (var j = c.items.length - 1;j >= 0; j--) {                    c.items.itemAt(j).columnId = c.id;					//alert(Ext.getDom(c.items.itemAt(j).body.id).innerHTML);                    c.items.itemAt(j).newBody = Ext.getDom(c.items.itemAt(j).body.id).innerHTML;					c.items.itemAt(j).pInfo = c.items.itemAt(j);					retVal.push(c.items.itemAt(j));				}			}			return retVal;		},		getPortlet : function(id) {			return this.portlets[id];		},        saveState : function(){			 var portal = Ext.ComponentMgr.get('portalid');             var colNum = portal.items.length;             var rowIndex = 0;			 var stateval = new String();			 while (true) {					var bFound = false;                              					for (var i = 0;i < colNum; i++) {                        var a = portal.items.itemAt(i);					    for(j=0;j<a.items.length;j++){						  var colId = a.id;						  var pos = j;						  stateval += a.items.itemAt(j).id + ',' + colId + ',' + pos + '|';						  					    }					    					    					}																									if(stateval != '')                    sm.set('PositionCookie:',stateval);					if (!bFound) {						break;					}					rowIndex++;				}				//alert('save state');				        },        restoreState : function(){			                var statevalue = sm.get('PositionCookie:');              stateArr = statevalue.split('|');              stateArr.pop(stateArr.length - 1);                            for(m=0;m<stateArr.length;m++){                myvalues = stateArr[m].split(',');                statepId = myvalues[0];                stateColId = myvalues[1];                statePos = myvalues[2];                var colNum = this.items.length;                var rowIndex = 0;    			for (var i = 0;i < colNum; i++) {                     var a = this.items.itemAt(i);                     if(stateColId == a.id){					    for(j=0;j< this.myportlets.length;j++){                                      if(this.myportlets[j].id == statepId){                                         this.myportlets[j].columnId = stateColId;                                                                                  this.addPortlet(this.myportlets[j]);                                          this.doLayout();                                      }                        }                     }				}             }			    	},    	restoreStateOnDB : function(){    	         	     var records = restoreRecordsArray;    	     for (m=0;m< records.length;m++) {    	                        statepId = records[m].Name;                stateColId = records[m].Column__c;                statePos = records[m].Row__c;                stateOpenClose = (records[m].State__c == 'Open' ? false : true);                currentState = records[m].State__c;                var colNum = this.items.length;                var rowIndex = 0;    			for (var i = 1;i <= colNum; i++) {                                          if(stateColId == i){					    for(j=0;j< this.myportlets.length;j++){					                  //alert(this.myportlets[j].name);                                      if(this.myportlets[j].name == statepId){                                         this.myportlets[j].columnId = this.items.itemAt(i-1).id;                                                                                  this.myportlets[j].collapsed = stateOpenClose;                                         this.myportlets[j].currentState = currentState;                                         this.addPortlet(this.myportlets[j]);                                          this.doLayout();                                                                               }                        }                     }				}    	     }    	         	     //alert('me');    	},        insertAllItems : function(){		      var colNum = this.items.length;              var rowIndex = 0;			  while (true) {					var bFound = false;					for (var i = 0;i < colNum; i++) {                        var a = this.items.itemAt(i);					    for(j=0;j<this.myportlets.length;j++){                                      if(this.myportlets[j].columnId == a.id){                                        this.addPortlet(this.myportlets[j]);                                         this.doLayout();                                      }                                  }					}					if (!bFound) {						break;					}					rowIndex++;    		  }			},		insertAllItemsDB : function(){		         	     var records = defaultRecordsArray;    	     for (m=0;m< records.length;m++) {    	        statepId = records[m].Name;                stateColId = records[m].defaultColumn__c;                statePos = records[m].defaultRow__c;                stateOpenClose = (records[m].defaultState__c == 'Open' ? false : true);                currentState = records[m].defaultState__c;                var colNum = this.items.length;                var rowIndex = 0;    			for (var i = 1;i <= colNum; i++) {                                          if(stateColId == i){					    for(j=0;j< this.myportlets.length;j++){					                  //alert(this.myportlets[j].name);                                      if(this.myportlets[j].name == statepId){                                         this.myportlets[j].columnId = this.items.itemAt(i-1).id;                                                                                  this.myportlets[j].collapsed = stateOpenClose;                                         this.myportlets[j].currentState = currentState;                                         this.addPortlet(this.myportlets[j]);                                          this.doLayout();                                                                               }                        }                     }				}     	     }    	     		},        removeAllItems : function (){                          this.myportlets = this.getAllPortlets();			              this.removeAllPortlets();			 //this.myportlets = this.portlets;			 //this.portlets = {};                    }	});Ext.reg('portal', Ext.ux.Portal);Ext.ux.Portal.DropZone = function(portal, cfg){    this.portal = portal;    // to remove the scroll bar below the content and above the footer    Ext.getDom(this.portal.body.id).style.overflow = 'hidden';    Ext.dd.ScrollManager.register(portal.body);    Ext.ux.Portal.DropZone.superclass.constructor.call(this, portal.bwrap.dom, cfg);    portal.body.ddScrollConfig = this.ddScrollConfig;};Ext.extend(Ext.ux.Portal.DropZone, Ext.dd.DropTarget, {    ddScrollConfig : {        vthresh: 50,        hthresh: -1,        animate: true,        increment: 200    },    createEvent : function(dd, e, data, col, c, pos){        return {            portal: this.portal,            panel: data.panel,            columnIndex: col,            column: c,            position: pos,            data: data,            source: dd,            rawEvent: e,            status: this.dropAllowed        };    },    notifyOver : function(dd, e, data){        var xy = e.getXY(), portal = this.portal, px = dd.proxy;        // case column widths        if(!this.grid){            this.grid = this.getGrid();        }        // handle case scroll where scrollbars appear during drag        var cw = portal.body.dom.clientWidth;        if(!this.lastCW){            this.lastCW = cw;        }else if(this.lastCW != cw){            this.lastCW = cw;            portal.doLayout();            this.grid = this.getGrid();        }        // determine column        var col = 0, xs = this.grid.columnX, cmatch = false;        for(var len = xs.length; col < len; col++){            if(xy[0] < (xs[col].x + xs[col].w)){                cmatch = true;                break;            }        }        // no match, fix last index        if(!cmatch){            col--;        }        // find insert position        var p, match = false, pos = 0,            c = portal.items.itemAt(col),            items = c.items.items;        for(var len = items.length; pos < len; pos++){            p = items[pos];            var h = p.el.getHeight();            if(h !== 0 && (p.el.getY()+(h/2)) > xy[1]){                match = true;                break;            }        }        var overEvent = this.createEvent(dd, e, data, col, c,                match && p ? pos : c.items.getCount());        if(portal.fireEvent('validatedrop', overEvent) !== false &&           portal.fireEvent('beforedragover', overEvent) !== false){            // make sure proxy width is fluid            px.getProxy().setWidth('auto');            if(p){                px.moveProxy(p.el.dom.parentNode, match ? p.el.dom : null);            }else{                px.moveProxy(c.el.dom, null);            }            this.lastPos = {c: c, col: col, p: match && p ? pos : false};            this.scrollPos = portal.body.getScroll();            portal.fireEvent('dragover', overEvent);            return overEvent.status;;        }else{            return overEvent.status;        }    },    notifyOut : function(){        delete this.grid;    },    notifyDrop : function(dd, e, data){        delete this.grid;        if(!this.lastPos){            return;        }        var c = this.lastPos.c, col = this.lastPos.col, pos = this.lastPos.p;        var dropEvent = this.createEvent(dd, e, data, col, c,                pos !== false ? pos : c.items.getCount());        if(this.portal.fireEvent('validatedrop', dropEvent) !== false &&           this.portal.fireEvent('beforedrop', dropEvent) !== false){            //alert('notifydrop' + dd + 'pos:' + pos);            dd.proxy.getProxy().remove();            dd.panel.el.dom.parentNode.removeChild(dd.panel.el.dom);            if(pos !== false){                c.insert(pos, dd.panel);            }else{                c.add(dd.panel);            }            c.doLayout();            this.portal.fireEvent('drop', dropEvent);            // scroll position is lost on drop, fix it            var st = this.scrollPos.top;            if(st){                var d = this.portal.body.dom;                setTimeout(function(){                    d.scrollTop = st;                }, 10);            }        }        delete this.lastPos;    },    // internal cache of body and column coords    getGrid : function(){        var box = this.portal.bwrap.getBox();        box.columnX = [];        this.portal.items.each(function(c){             box.columnX.push({x: c.el.getX(), w: c.el.getWidth()});                     });        return box;    },    // unregister the dropzone from ScrollManager    unreg: function() {        //Ext.dd.ScrollManager.unregister(this.portal.body);        Ext.ux.Portal.DropZone.superclass.unreg.call(this);    }});